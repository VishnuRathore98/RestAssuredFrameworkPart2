package User;

//import com.github.javafaker.Faker;
//import net.datafaker.Faker;
import User.pojos.UserPayloadAsPOJO;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.restassured.response.Response;
import org.apache.commons.lang3.RandomStringUtils;
import org.testng.Assert;
import org.testng.annotations.Test;
import restUtils.RestUtils;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
//import static User.Payloads.userName;

public class UserTest {
    UserPayloadAsPOJO payload;
    // Creating a new user
    @Test(priority = 1)
    void createUser() throws IOException {
/*
        The following lines of commented code can be used to define and use User data based on env
        like different type of data for Dev, QA, and Prod.

        String env = System.getProperty("env") == null ? "QA" : System.getProperty("env");
        Map<String,String> data = JsonUtils.getJsonDataAsMap("Users/"+env+"UsersAPIData.json");
        String endpoint = data.get("createUsersEndpoint");
        Map<String,String> payload = Payloads.getMapData("","","","","","","","");
*/

        String endpoint = "https://petstore.swagger.io/v2/user";
//      When we want to pass all data generated by Payload.getCreateUserPayloadFromPOJO().

//      UserPayloadAsPOJO payload = Payloads.getCreateUserPayloadFromPOJO();

//      When we want to pass all the default generated data.

//      UserPayloadAsPOJO payload = new UserPayloadAsPOJO();

//      When we want to pass some custom data but use the rest as default generated.
        payload = new UserPayloadAsPOJO().toBuilder().firstName("John").build();
        Response response = RestUtils.performPost(endpoint,payload,new HashMap<>());
        Assert.assertEquals(response.statusCode(),200);
    }

//  Getting created user's data
    @Test(priority = 2)
    void getUser() throws JsonProcessingException {
        String endpoint = "https://petstore.swagger.io/v2/user/";
        Map<String,String> param = new HashMap<>();
        param.put("userName",Payloads.getCreateUserPayloadFromPOJO().getUserName());

        Response response = RestUtils.performGet(endpoint,Payloads.getCreateUserPayloadFromPOJO().getUserName(),new HashMap<>());
        Assert.assertEquals(response.statusCode(),200);

//      First way, by comparing individual fields.
        Assert.assertEquals(response.jsonPath().getString("firstName"),payload.getFirstName());

//      Second way, by comparing request payloads with response.
        ObjectMapper objectMapper = new ObjectMapper();
//      Converting response in string and then deserializing it and pass it to UserPayloadAsPOJO for converting it to POJO.
        UserPayloadAsPOJO createUserResponse = objectMapper.readValue(response.getBody().asString(), UserPayloadAsPOJO.class);
        Assert.assertEquals(createUserResponse,payload);
    }
}
